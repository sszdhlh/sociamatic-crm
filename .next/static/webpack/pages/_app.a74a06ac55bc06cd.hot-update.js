"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./services/api/authService.ts":
/*!*************************************!*\
  !*** ./services/api/authService.ts ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _apiClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./apiClient */ \"./services/api/apiClient.ts\");\n\n/**\r\n * Authentication service, provides login, register and token refresh functionality\r\n */ const authService = {\n    /**\r\n   * User login\r\n   * @param data Login request data\r\n   */ login: async (data)=>{\n        console.log(\"Starting login process\", data.email);\n        // Development environment mock login - fixed test account\n        if (data.email === \"test@example.com\" && data.password === \"password\") {\n            console.log(\"Using test account login\");\n            const mockResponse = {\n                accessToken: \"mock-access-token-12345\",\n                refreshToken: \"mock-refresh-token-12345\",\n                user: {\n                    id: \"test-user-id\",\n                    name: \"Test User\",\n                    email: \"test@example.com\",\n                    role: \"admin\"\n                }\n            };\n            // Store tokens\n            localStorage.setItem(\"accessToken\", mockResponse.accessToken);\n            localStorage.setItem(\"refreshToken\", mockResponse.refreshToken);\n            console.log(\"Test account login successful\");\n            return mockResponse;\n        }\n        // Regular API login flow\n        try {\n            const response = await _apiClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/auth/login\", data);\n            // Add debug info, print full response\n            console.log(\"API login response:\", JSON.stringify(response.data));\n            // Handle different API response formats\n            let userData;\n            // If API directly returns token and user info\n            if (response.data.accessToken && response.data.user) {\n                userData = response.data;\n            } else if (response.data.data && response.data.data.accessToken) {\n                userData = {\n                    accessToken: response.data.data.accessToken,\n                    refreshToken: response.data.data.refreshToken || \"\",\n                    user: response.data.data.user\n                };\n            } else if (response.data.tokens) {\n                userData = {\n                    accessToken: response.data.tokens.accessToken,\n                    refreshToken: response.data.tokens.refreshToken || \"\",\n                    user: response.data.user\n                };\n            } else {\n                throw new Error(\"Unable to recognize API response format\");\n            }\n            // Store tokens after successful login\n            localStorage.setItem(\"accessToken\", userData.accessToken);\n            localStorage.setItem(\"refreshToken\", userData.refreshToken);\n            console.log(\"Login successful, received token\", userData.accessToken.substring(0, 10) + \"...\");\n            return userData;\n        } catch (error) {\n            console.error(\"API login error:\", error);\n            // If there is response data, print it\n            if (error.response) {\n                console.error(\"Error response:\", error.response.data);\n                console.error(\"Status code:\", error.response.status);\n            }\n            throw error;\n        }\n    },\n    /**\r\n   * User registration\r\n   * @param data Registration request data\r\n   */ register: async (data)=>{\n        try {\n            // For development testing, handle test user registration directly\n            if (data.email === \"test@example.com\") {\n                const mockResponse = {\n                    accessToken: \"mock-access-token-reg-12345\",\n                    refreshToken: \"mock-refresh-token-reg-12345\",\n                    user: {\n                        id: \"test-user-id\",\n                        name: data.name,\n                        email: data.email,\n                        role: data.role\n                    }\n                };\n                console.log(\"Test account registration successful\");\n                return mockResponse;\n            }\n            const response = await _apiClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/auth/register\", data);\n            return response.data;\n        } catch (error) {\n            console.error(\"Registration error:\", error);\n            throw error;\n        }\n    },\n    /**\r\n   * Refresh access token\r\n   */ refreshToken: async ()=>{\n        const refreshToken = localStorage.getItem(\"refreshToken\");\n        if (!refreshToken) {\n            throw new Error(\"No refresh token\");\n        }\n        const response = await _apiClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(\"/auth/refresh-token\", {\n            refreshToken\n        });\n        // Update access token in storage\n        localStorage.setItem(\"accessToken\", response.data.accessToken);\n        return response.data;\n    },\n    /**\r\n   * User logout\r\n   */ logout: ()=>{\n        localStorage.removeItem(\"accessToken\");\n        localStorage.removeItem(\"refreshToken\");\n        localStorage.removeItem(\"user\");\n    },\n    /**\r\n   * Check if user is authenticated\r\n   */ isAuthenticated: ()=>{\n        if (false) {}\n        return !!localStorage.getItem(\"accessToken\");\n    }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (authService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./services/api/authService.ts\n"));

/***/ })

});